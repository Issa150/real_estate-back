generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  OWNER
  AGENT
  MANAGER
  SUPER_ADMIN
}

enum PropertyStatus {
  AVAILABLE
  UNAVAILABLE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ListingType {
  SALE
  RENT
  BOTH
}

enum FamilyStatus {
  CELIBATAIRE
  MARIE
  AVEC_ENFANT
  AUTRE
}

enum EmploymentType {
  CDD
  CDI
  INTERIM
  FREELANCE
  RETRAITE
  ETUDIANT
  CHOMEUR
  AUTO_ENTREPRENEUR
}

enum DealType {
  SALE
  RENT
}

enum ClientFlagType {
  MISSING_DOCUMENTS
  VIP_CLIENT
  NEEDS_ASSISTANCE
  POTENTIAL_FRAUD
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String
  role           Role           @default(CLIENT)
  firstname      String
  lastname       String
  phone          String
  profilePicture String?
  isActive       Boolean        @default(true)
  deletedAt      DateTime?
  createdAt      DateTime       @default(now())

  clientProfile  ClientProfile?
  agentProfile   AgentProfile?
  requestsAsClient Request[] @relation("ClientUserRequest")
  requestsAsAgent  Request[] @relation("AgentUserRequest")
  notifications  Notification[]
}

model ClientProfile {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @unique
  isVerifiedOwner  Boolean?       @default(false)
  familyStatus     FamilyStatus?
  isHandicapped    Boolean?       @default(false)
  isPriority       Boolean?       @default(false)
  isEmployed       Boolean?       @default(false)
  employmentType   EmploymentType?
  personalIncome   Int?
  householdIncome  Int?

  preferredCities  PreferredCity[]
  propertiesOwned  Property[]
  savedProperties  SavedProperty[]
  clientNotes      ClientNote[]
  flags            ClientFlagOnClientAndAgent[]
  dealsAsClient    Deal[]        @relation("ClientDeals")
  dealsAsLandlord  Deal[]        @relation("LandlordDeals")
}

model PreferredCity {
  id         Int            @id @default(autoincrement())
  city       String
  client     ClientProfile  @relation(fields: [clientId], references: [id])
  clientId   Int
}

model AgentProfile {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int            @unique
  agency           Agency         @relation(fields: [agencyId], references: [id])
  agencyId         Int
  position         Role
  hiredAt          DateTime       @default(now())
  performanceScore Float          @default(0)

  propertiesManaged Property[]
  clientNotes       ClientNote[]
  flagsSet          ClientFlagOnClientAndAgent[]
  dealsClosed       Deal[]
}

model Agency {
  id          Int             @id @default(autoincrement())
  postalCode  String
  city        String
  department  String
  address     String

  agents      AgentProfile[]
  properties  Property[]
}

model Property {
  id           Int             @id @default(autoincrement())
  title        String
  description  String
  price        Int
  type         String
  rooms        Int
  area         Int
  status       PropertyStatus  @default(AVAILABLE)
  listingType  ListingType     @default(SALE)
  city         String
  department   String
  address      String

  owner        ClientProfile   @relation(fields: [ownerId], references: [id])
  ownerId      Int

  agent        AgentProfile?    @relation(fields: [agentId], references: [id])
  agentId      Int?

  agency       Agency          @relation(fields: [agencyId], references: [id])
  agencyId     Int

  images       PropertyImage[]
  requests     Request[]
  savedBy      SavedProperty[]
  deals        Deal[]
}

model PropertyImage {
  id         Int       @id @default(autoincrement())
  url        String
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model Request {
  id             Int            @id @default(autoincrement())
  property       Property       @relation(fields: [propertyId], references: [id])
  propertyId     Int

  client         User      @relation("ClientUserRequest", fields: [clientId], references: [id])
  clientId       Int

  agent          User?     @relation("AgentUserRequest", fields: [agentId], references: [id])
  agentId        Int? 

  status         RequestStatus  @default(PENDING)
  updatedAt      DateTime       @updatedAt
  createdAt      DateTime       @default(now())
  scheduledVisit DateTime?
}

model Deal {
  id           Int             @id @default(autoincrement())
  property     Property        @relation(fields: [propertyId], references: [id])
  propertyId   Int

  client       ClientProfile   @relation("ClientDeals", fields: [clientId], references: [id])
  clientId     Int

  landlord     ClientProfile   @relation("LandlordDeals", fields: [landlordId], references: [id])
  landlordId   Int

  agent        AgentProfile    @relation(fields: [agentId], references: [id])
  agentId      Int

  dealType     DealType
  priceAgreed  Int
  signedAt     DateTime
  notes        String?

  createdAt    DateTime        @default(now())
}

model SavedProperty {
  id         Int            @id @default(autoincrement())
  client     ClientProfile  @relation(fields: [clientId], references: [id])
  clientId   Int

  property   Property       @relation(fields: [propertyId], references: [id])
  propertyId Int

  savedAt    DateTime       @default(now())

  @@unique([clientId, propertyId])
}

model ClientNote {
  id         Int            @id @default(autoincrement())
  content    String
  createdAt  DateTime       @default(now())
  author     AgentProfile   @relation(fields: [authorId], references: [id])
  authorId   Int
  client     ClientProfile  @relation(fields: [clientId], references: [id])
  clientId   Int
}

model ClientFlagOnClientAndAgent {
  id         Int            @id @default(autoincrement())
  type       ClientFlagType
  createdAt  DateTime       @default(now())
  client     ClientProfile  @relation(fields: [clientId], references: [id])
  clientId   Int
  setBy      AgentProfile   @relation(fields: [setById], references: [id])
  setById    Int
}

model Notification {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}